{"version":3,"sources":["../src/index.ts","../src/utils/avg.ts","../src/utils/corelation.ts","../src/utils/extrema.ts","../src/utils/max.ts","../src/utils/median.ts","../src/utils/min.ts","../src/utils/mode.ts","../src/utils/percentile.ts","../src/utils/range.ts","../src/utils/stdDev.ts","../src/utils/variance.ts"],"sourcesContent":["import avg from \"./utils/avg\";\r\nimport corelation from \"./utils/corelation\";\r\nimport extrema from \"./utils/extrema\";\r\nimport max from \"./utils/max\";\r\nimport median from \"./utils/median\";\r\nimport min from \"./utils/min\";\r\nimport mode from \"./utils/mode\";\r\nimport percentile from \"./utils/percentile\";\r\nimport range from \"./utils/range\";\r\nimport stdDev from \"./utils/stdDev\";\r\nimport variance from \"./utils/variance\";\r\n\r\nexport {\r\n  avg,\r\n  corelation,\r\n  extrema,\r\n  max,\r\n  median,\r\n  min,\r\n  mode,\r\n  percentile,\r\n  range,\r\n  stdDev,\r\n  variance,\r\n};\r\n","const avg = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot calculate average.\");\r\n    }\r\n\r\n    const sum: number = arr.reduce((acc, val) => acc + val, 0);\r\n    const avg: number = sum / arr.length;\r\n    return avg;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default avg;\r\n","const corelation = (arr1: number[], arr2: number[]): number | string => {\r\n  try {\r\n    if (arr1.length !== arr2.length || arr1.length === 0 || arr2.length === 0) {\r\n      throw new Error(\"Arrays should be of equal length and cannot be empty.\");\r\n    }\r\n\r\n    const mean1: number = arr1.reduce((acc, val) => acc + val, 0) / arr1.length;\r\n    const mean2: number = arr2.reduce((acc, val) => acc + val, 0) / arr2.length;\r\n\r\n    const diff1: number[] = arr1.map(num => num - mean1);\r\n    const diff2: number[] = arr2.map(num => num - mean2);\r\n\r\n    const sumProduct: number = diff1.reduce(\r\n      (acc, val, index) => acc + val * diff2[index],\r\n      0\r\n    );\r\n\r\n    const squaredDiff1: number = diff1.reduce((acc, val) => acc + val ** 2, 0);\r\n    const squaredDiff2: number = diff2.reduce((acc, val) => acc + val ** 2, 0);\r\n\r\n    const correlation: number =\r\n      sumProduct / Math.sqrt(squaredDiff1 * squaredDiff2);\r\n\r\n    return correlation;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default corelation;\r\n","const extrema = (arr: number[]): [number, number] | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot find extrema.\");\r\n    }\r\n\r\n    const min: number = Math.min(...arr);\r\n    const max: number = Math.max(...arr);\r\n    return [min, max];\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default extrema;\r\n","const max = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot find maximum.\");\r\n    }\r\n\r\n    const max: number = Math.max(...arr);\r\n    return max;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default max;\r\n","const median = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot calculate median.\");\r\n    }\r\n\r\n    const sortedArr: number[] = arr.slice().sort((a, b) => a - b);\r\n    const middle: number = Math.floor(sortedArr.length / 2);\r\n\r\n    if (sortedArr.length % 2 === 0) {\r\n      return (sortedArr[middle - 1] + sortedArr[middle]) / 2;\r\n    } else {\r\n      return sortedArr[middle];\r\n    }\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default median;\r\n","const min = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot find minimum.\");\r\n    }\r\n\r\n    const min: number = Math.min(...arr);\r\n    return min;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default min;\r\n","const mode = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot calculate mode.\");\r\n    }\r\n\r\n    const occurrences = new Map<number, number>();\r\n    arr.forEach(num => {\r\n      occurrences.set(num, (occurrences.get(num) || 0) + 1);\r\n    });\r\n\r\n    let mode: number | undefined;\r\n    let maxOccurrences = 0;\r\n\r\n    for (const [key, value] of occurrences.entries()) {\r\n      if (value > maxOccurrences) {\r\n        mode = key;\r\n        maxOccurrences = value;\r\n      }\r\n    }\r\n\r\n    if (maxOccurrences === 1) {\r\n      throw new Error(\"No mode found. All values occurred only once.\");\r\n    }\r\n\r\n    return mode as number;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default mode;\r\n","const percentile = (arr: number[], percentile: number): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot calculate percentile.\");\r\n    }\r\n\r\n    const sortedArr: number[] = arr.slice().sort((a, b) => a - b);\r\n    const index = (percentile / 100) * (sortedArr.length - 1);\r\n\r\n    if (Number.isInteger(index)) {\r\n      return sortedArr[index];\r\n    }\r\n\r\n    const lowerValue = sortedArr[Math.floor(index)];\r\n    const upperValue = sortedArr[Math.ceil(index)];\r\n\r\n    return lowerValue + (upperValue - lowerValue) * (index - Math.floor(index));\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default percentile;\r\n","const range = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot calculate range.\");\r\n    }\r\n\r\n    const min: number = Math.min(...arr);\r\n    const max: number = Math.max(...arr);\r\n    const range: number = max - min;\r\n    return range;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default range;\r\n","const stdDev = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot calculate standard deviation.\");\r\n    }\r\n\r\n    const mean: number = arr.reduce((acc, val) => acc + val, 0) / arr.length;\r\n    const squaredDiffs: number[] = arr.map(num => Math.pow(num - mean, 2));\r\n    const variance: number =\r\n      squaredDiffs.reduce((acc, val) => acc + val, 0) / arr.length;\r\n    const stdDeviation: number = Math.sqrt(variance);\r\n    return stdDeviation;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default stdDev;\r\n","const variance = (arr: number[]): number | string => {\r\n  try {\r\n    if (arr.length === 0) {\r\n      throw new Error(\"Array is empty. Cannot calculate variance.\");\r\n    }\r\n\r\n    const mean: number = arr.reduce((acc, val) => acc + val, 0) / arr.length;\r\n    const squaredDiffs: number[] = arr.map(num => Math.pow(num - mean, 2));\r\n    const variance: number =\r\n      squaredDiffs.reduce((acc, val) => acc + val, 0) / arr.length;\r\n    return variance;\r\n  } catch (error) {\r\n    return `Error: ${(error as Error).message}`;\r\n  }\r\n};\r\n\r\nexport default variance;\r\n"],"mappings":"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","names":["avg","min","max","max","min","mode","percentile","min","max","range","variance","variance"]}